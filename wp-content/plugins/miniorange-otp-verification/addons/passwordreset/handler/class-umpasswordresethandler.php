<?php
/**
 * Addon handler.
 *
 * @package miniorange-otp-verification/addons
 */

namespace OTP\Addons\PasswordReset\Handler;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}
use OTP\Addons\PasswordReset\Helper\UMPasswordResetMessages;
use OTP\Helper\FormSessionVars;
use OTP\Helper\MoUtility;
use OTP\Helper\SessionUtils;
use OTP\Objects\FormHandler;
use OTP\Objects\IFormHandler;
use OTP\Objects\VerificationType;
use OTP\Traits\Instance;
use OTP\Helper\MoMessages;
use OTP\Helper\MoConstants;
use UM;
use um\core\Form;
use um\core\Options;
use um\core\Password;
use um\core\User;
use WP_User;

/**
 * Password Reset Handler handles sending an OTP to the user instead of
 * the link that usually gets sent out to the user's email address.
 */
if ( ! class_exists( 'UMPasswordResetHandler' ) ) {
	/**
	 * UMPasswordResetHandler class
	 */
	class UMPasswordResetHandler extends FormHandler implements IFormHandler {

		use Instance;

		/**
		 * Used to get username field key.
		 *
		 * @var string $field_key username field key.
		 */
		private $field_key;

		/**
		 * Check for only Phone verification.
		 *
		 * @var boolean $is_only_phone_reset if only phone allowed
		 */
		private $is_only_phone_reset;
		/**
		 * Initializes values
		 */
		protected function __construct() {
			$this->is_ajax_form        = true;
			$this->is_add_on_form      = true;
			$this->form_option         = 'um_password_reset_handler';
			$this->form_session_var    = FormSessionVars::UM_DEFAULT_PASS;
			$this->type_phone_tag      = 'mo_um_phone_enable';
			$this->type_email_tag      = 'mo_um_email_enable';
			$this->phone_form_id       = 'username_b';
			$this->field_key           = 'username_b';
			$this->form_key            = 'ULTIMATE_PASS_RESET';
			$this->form_name           = mo_( 'Ultimate Member Password Reset using OTP' );
			$this->is_form_enabled     = get_umpr_option( 'pass_enable' ) ? true : false;
			$this->generate_otp_action = 'mo_umpr_send_otp';
			$this->button_text         = get_umpr_option( 'pass_button_text' );
			$this->button_text         = ! MoUtility::is_blank( $this->button_text ) ? $this->button_text : mo_( 'Reset Password' );
			$this->phone_key           = get_umpr_option( 'passphone_key' );
			$this->phone_key           = $this->phone_key ? $this->phone_key : 'mobile_number';
			$this->is_only_phone_reset = get_umpr_option( 'only_phone_reset' );

			parent::__construct();
		}

		/**
		 * Function checks if form has been enabled by the admin and initializes
		 * all the class variables. This function also defines all the hooks to
		 * hook into to make OTP Verification possible.
		 */
		public function handle_form() {
			$this->otp_type = get_umpr_option( 'enabled_type' );
			if ( $this->is_only_phone_reset ) {
				$this->phone_form_id = 'input#username_b';
			}
			add_action( 'wp_ajax_nopriv_' . $this->generate_otp_action, array( $this, 'sendAjaxOTPRequest' ) );
			add_action( 'wp_ajax_' . $this->generate_otp_action, array( $this, 'sendAjaxOTPRequest' ) );
			add_action( 'wp_enqueue_scripts', array( $this, 'miniorange_register_um_script' ) );
			add_action( 'um_reset_password_errors_hook', array( $this, 'um_reset_password_errors_hook' ), 99 );
			add_action( 'um_reset_password_process_hook', array( $this, 'um_reset_password_process_hook' ), 1 );
		}

		/**
		 * Send an OTP to the user's phone or email.
		 *
		 * @throws \ReflectionException On error.
		 */
		public function sendAjaxOTPRequest() {
			MoUtility::initialize_transaction( $this->form_session_var );

			if ( ! check_ajax_referer( $this->nonce, $this->nonce_key ) ) {
				wp_send_json(
					MoUtility::create_json(
						MoMessages::showMessage( MoMessages::UNKNOWN_ERROR ),
						MoConstants::ERROR_JSON_TYPE
					)
				);
				exit;
			}
			$data     = MoUtility::mo_sanitize_array( $_POST );
			$username = MoUtility::sanitize_check( 'username', $data );
			SessionUtils::add_user_in_session( $this->form_session_var, $username );
			$user = $this->getUser( $username );

			if ( ! $user ) {

				if ( $this->is_only_phone_reset ) {
					wp_send_json(
						MoUtility::create_json(
							UMPasswordResetMessages::showMessage( UMPasswordResetMessages::RESET_LABEL_OP ),
							'error'
						)
					);
				} else {
					wp_send_json(
						MoUtility::create_json(
							UMPasswordResetMessages::showMessage( UMPasswordResetMessages::USERNAME_NOT_EXIST ),
							'error'
						)
					);
				}
			} else {
				$phone = get_user_meta( $user->ID, $this->phone_key, true );

				$this->startOtpTransaction( null, $user->user_email, null, $phone, null, null );
			}
		}
		/**
		 * Callback function for the um_reset_password_process_hook to
		 * redirect the user to the password change page using the
		 * password reset URL generated by Ultimate Member.
		 */
		public function um_reset_password_process_hook() {
			$user    = MoUtility::sanitize_check( 'username_b', $_POST ); // phpcs:ignore WordPress.Security.NonceVerification.Missing -- No need for nonce verification as the function is called on third party plugin hook.
			$user    = $this->getUser( trim( $user ) );
			$pwd_obj = $this->getUmpwd_obj();
						um_fetch_user( $user->ID );  // phpcs:ignore intelephense.diagnostics.undefinedFunctions -- Default function of Ultimate member plugin.
			$this->getUmUserObj()->password_reset();
			wp_safe_redirect( $pwd_obj->reset_url() );
			exit();
		}

		/**
		 * Call function for the um_reset_password_error_hook to
		 * check if the user has started the password reset flow.
		 * Check if user is entering his phone number and fetch user
		 * based off on that.
		 * <br/><br/>
		 * If all checks pass then validate the OTP as well.
		 */
		public function um_reset_password_errors_hook() {
			$form     = $this->getum_formObj();
			$data     = MoUtility::mo_sanitize_array( $_POST );  // phpcs:ignore WordPress.Security.NonceVerification.Missing -- No need for nonce verification as the function is called on third party plugin hook.
			$username = MoUtility::sanitize_check( $this->field_key, $data );

			if ( isset( $form->errors ) ) {
				if ( strcasecmp( $this->otp_type, $this->type_phone_tag ) === 0
				&& MoUtility::validate_phone_number( $username ) ) {
					$user = $this->getUserFromPhoneNumber( $username );
					if ( ! $user ) {
						$form->add_error(
							$this->field_key,
							UMPasswordResetMessages::showMessage( UMPasswordResetMessages::USERNAME_NOT_EXIST )
						);
					} else {
						$form->errors = null;
						if ( ! isset( $form->errors ) ) {
							$this->check_reset_password_limit( $form, $user->ID );
						}
					}
				}
			}
			if ( ! isset( $form->errors ) ) {
				$this->checkIntegrityAndValidateOTP( $form, MoUtility::sanitize_check( 'verify_field', $data ), $data ); //phpcs:ignore $data is an array but considered as a string(false positive).
			}
		}

		/**
		 * Check Integrity of the email or phone number. i.e. Ensure that the Email or
		 * Phone that the OTP was sent to is the same Email or Phone that is being submitted
		 * with the form.
		 * <br/<br/>
		 * Once integrity check passes validate the OTP to ensure that the user has entered
		 * the correct OTP.
		 *
		 * @param Form   $form to check the form request.
		 * @param string $value value of the user input.
		 * @param array  $args to get extra parameter.
		 */
		private function checkIntegrityAndValidateOTP( &$form, $value, array $args ) {

			$otp_ver_type = $this->get_verification_type();
			$this->checkIntegrity( $form, $args );
			$this->validate_challenge( $otp_ver_type, null, $value );
			if ( ! SessionUtils::is_status_match( $this->form_session_var, self::VALIDATED, $otp_ver_type ) ) {
				$form->add_error( $this->field_key, UMPasswordResetMessages::showMessage( UMPasswordResetMessages::INVALID_OTP ) );
			}
		}


		/**
		 * This function checks the integrity of the phone or email value that was submitted
		 * with the form. It needs to match with the email or value that the OTP was
		 * initially sent to.
		 *
		 * @param Form  $um_form check um form values.
		 * @param array $args to get extra parametere.
		 */
		private function checkIntegrity( $um_form, array $args ) {
			$session_var = SessionUtils::get_user_submitted( $this->form_session_var );
			if ( $session_var !== $args[ $this->field_key ] ) {
				$um_form->add_error( $this->field_key, UMPasswordResetMessages::showMessage( UMPasswordResetMessages::USERNAME_MISMATCH ) );
			}
		}

		/**
		 * Get UserId based on the username passed
		 *
		 * @param string $user for the user data.
		 * @return bool|int
		 */
		public function getUserId( $user ) {
			$user = $this->getUser( $user );
			return $user ? $user->ID : false;
		}


		/**
		 * Get User based on the username passed
		 *
		 * @param string $username for the username.
		 * @return bool|WP_User
		 */
		public function getUser( $username ) {
			if ( strcasecmp( $this->otp_type, $this->type_phone_tag ) === 0
			&& MoUtility::validate_phone_number( $username ) ) {
				$username = MoUtility::process_phone_number( $username );
				$user     = $this->getUserFromPhoneNumber( $username );
			} elseif ( is_email( $username ) ) {
				$user = get_user_by( 'email', $username );
			} else {
				$user = get_user_by( 'login', $username );
			}
			return $user;
		}


		/**
		 * This functions fetches the user associated with a phone number
		 *
		 * @param string $username - the user's username.
		 * @return bool|WP_User
		 */
		private function getUserFromPhoneNumber( $username ) {
			global $wpdb;
			$results = $wpdb->get_row( $wpdb->prepare( "SELECT `user_id` FROM `{$wpdb->prefix}usermeta` WHERE `meta_key` = %s AND `meta_value` = %s", array( $this->phone_key, $username ) ) );// phpcs:ignore WordPress.DB.DirectDatabaseQuery.NoCaching, WordPress.DB.DirectDatabaseQuery.DirectQuery, Direct database call without caching detected -- DB Direct Query is necessary here.
			return ! MoUtility::is_blank( $results ) ? get_userdata( $results->user_id ) : false;
		}


		/**
		 * This function checks the reset password limit set by the
		 * admin in the Ultimate Member option.
		 *
		 * @param object $form form value.
		 * @param string $user_id WP user id.
		 */
		public function check_reset_password_limit( $form, $user_id ) {
			$attempts = (int) get_user_meta( $user_id, 'password_rst_attempts', true );
			$is_admin = user_can( intval( $user_id ), 'manage_options' );

			if ( $this->getUmOptions()->get( 'enable_reset_password_limit' ) ) {
				if ( $this->getUmOptions()->get( 'disable_admin_reset_password_limit' ) && $is_admin ) {
					return;
					// Triggers this when a user has admin capabilities and when reset password limit is disabled for admins.
				} else {
					$limit = $this->getUmOptions()->get( 'reset_password_limit_number' );
					if ( $attempts >= $limit ) {
						$form->add_error(
							$this->field_key,
							__(
								'You have reached the limit for requesting password ".
                    "change for this user already. Contact support if you cannot open the email',
								'ultimate-member'
							)
						);
					} else {
						update_user_meta( $user_id, 'password_rst_attempts', $attempts + 1 );
					}
				}
			}
		}


		/**
		 * Get form data. Checks to see which version of the Ultimate Member
		 * is installed and return form data accordingly.
		 *
		 * @return \UM\Core\Form
		 */
		private function getum_formObj() {
			if ( $this->isUltimateMemberV2Installed() ) {
				return UM()->form();  //phpcs:ignore intelephense.diagnostics.undefinedFunctions -- Default function of Ultimate member plugin.
			} else {

				global $ultimatemember;
				return $ultimatemember->form;
			}
		}


		/**
		 * Get User Obj. Checks to see which version of the Ultimate Member
		 * is installed and return form data accordingly.
		 *
		 * @return User
		 */
		private function getUmUserObj() {
			if ( $this->isUltimateMemberV2Installed() ) {
				return UM()->user();  //phpcs:ignore intelephense.diagnostics.undefinedFunctions -- Default function of Ultimate member plugin.
			} else {

				global $ultimatemember;
				return $ultimatemember->user;
			}
		}


		/**
		 * Get Ultimate Member Password. Checks to see which version of the Ultimate Member
		 * is installed and return form data accordingly.
		 *
		 * @return Password
		 */
		private function getUmpwd_obj() {
			if ( $this->isUltimateMemberV2Installed() ) {
				return UM()->password();  //phpcs:ignore intelephense.diagnostics.undefinedFunctions -- Default function of Ultimate member plugin.
			} else {
				global $ultimatemember;
				return $ultimatemember->password;
			}
		}


		/**
		 * Get Options data. Checks to see which version of the Ultimate Member
		 * is installed and return form data accordingly.
		 *
		 * @return Options
		 */
		private function getUmOptions() {
			if ( $this->isUltimateMemberV2Installed() ) {
				return UM()->options();  //phpcs:ignore intelephense.diagnostics.undefinedFunctions -- Default function of Ultimate member plugin.
			} else {
				global $ultimatemember;
				return $ultimatemember->options;
			}
		}

		/**
		 * Checks if the plugin is installed or not. Returns true or false.
		 *
		 * @return boolean
		 */
		private function isUltimateMemberV2Installed() {
			if ( ! function_exists( 'is_plugin_active' ) ) {
				include_once ABSPATH . 'wp-admin/includes/plugin.php';
			}
			return is_plugin_active( 'ultimate-member/ultimate-member.php' );
		}


		/**
		 * The function is called to start the OTP Transaction based on the OTP Type
		 * set by the admin in the settings.
		 *
		 * @param string $username     - the username passed by the registration_errors hook.
		 * @param string $email        - the email passed by the registration_errors hook.
		 * @param string $errors       - the errors variable passed by the registration_errors hook.
		 * @param string $phone_number - the phone number posted by the user during registration.
		 * @param string $password     - the password submitted by the user during registration.
		 * @param string $extra_data   - the extra data submitted by the user during registration.
		 */
		private function startOtpTransaction( $username, $email, $errors, $phone_number, $password, $extra_data ) {
			if ( strcasecmp( $this->otp_type, $this->type_phone_tag ) === 0 ) {
				$this->send_challenge( $username, $email, $errors, $phone_number, VerificationType::PHONE, $password, $extra_data );
			} else {
				$this->send_challenge( $username, $email, $errors, $phone_number, VerificationType::EMAIL, $password, $extra_data );
			}
		}


		/**
		 * This function registers the js file for enabling OTP Verification
		 * for Ultimate Member using AJAX calls.
		 */
		public function miniorange_register_um_script() {
			wp_register_script( 'moumpr', UMPR_URL . 'includes/js/moumpr.min.js', array( 'jquery' ), MOV_VERSION, true );
			wp_localize_script(
				'moumpr',
				'moumprvar',
				array(
					'siteURL'        => wp_ajax_url(),
					'nonce'          => wp_create_nonce( $this->nonce ),
					'buttontext'     => mo_( $this->button_text ),
					'imgURL'         => MOV_LOADER_URL,
					'action'         => array( 'send' => $this->generate_otp_action ),
					'fieldKey'       => $this->field_key,
					'resetLabelText' => UMPasswordResetMessages::showMessage(
						$this->is_only_phone_reset
										? UMPasswordResetMessages::RESET_LABEL_OP : UMPasswordResetMessages::RESET_LABEL
					),
					'phText'         => $this->is_only_phone_reset
										? mo_( 'Enter Your Phone Number' ) : mo_( 'Enter Your Email, Username or Phone Number' ),
				)
			);
			wp_enqueue_script( 'moumpr' );
		}


		/**
		 * Unset all the session variables so that a new form submission starts
		 * a fresh process of OTP verification.
		 */
		public function unset_otp_session_variables() {
			SessionUtils::unset_session( array( $this->tx_session_id, $this->form_session_var ) );
		}

		/**
		 * This function hooks into the otp_verification_successful hook. This function is
		 * details what needs to be done if OTP Verification is successful.
		 *
		 * @param string $redirect_to the redirect to URL after new user registration.
		 * @param string $user_login the username posted by the user.
		 * @param string $user_email the email posted by the user.
		 * @param string $password the password posted by the user.
		 * @param string $phone_number the phone number posted by the user.
		 * @param string $extra_data any extra data posted by the user.
		 * @param string $otp_type the verification type.
		 */
		public function handle_post_verification( $redirect_to, $user_login, $user_email, $password, $phone_number, $extra_data, $otp_type ) {

			SessionUtils::add_status( $this->form_session_var, self::VALIDATED, $otp_type );
		}


		/**
		 * This function hooks into the otp_verification_failed hook. This function
		 * details what is done if the OTP verification fails.
		 *
		 * @param string $user_login the username posted by the user.
		 * @param string $user_email the email posted by the user.
		 * @param string $phone_number the phone number posted by the user.
		 * @param string $otp_type the verification type.
		 */
		public function handle_failed_verification( $user_login, $user_email, $phone_number, $otp_type ) {

			SessionUtils::add_status( $this->form_session_var, self::VERIFICATION_FAILED, $otp_type );
		}

		/**
		 * To update form option.
		 */
		public function handle_form_options() {
			if ( ! MoUtility::are_form_options_being_saved( $this->get_form_option() ) ) {
				return;
			}

			$this->is_form_enabled     = $this->sanitize_form_post( 'um_pr_enable' );
			$this->button_text         = $this->sanitize_form_post( 'um_pr_button_text' );
			$this->button_text         = $this->button_text ? $this->button_text : 'Reset Password';
			$this->otp_type            = $this->sanitize_form_post( 'um_pr_enable_type' );
			$this->phone_key           = $this->sanitize_form_post( 'um_pr_phone_field_key' );
			$this->is_only_phone_reset = $this->sanitize_form_post( 'um_pr_only_phone' );

			update_umpr_option( 'only_phone_reset', $this->is_only_phone_reset );
			update_umpr_option( 'pass_enable', $this->is_form_enabled );
			update_umpr_option( 'pass_button_text', $this->button_text );
			update_umpr_option( 'enabled_type', $this->otp_type );
			update_umpr_option( 'passphone_key', $this->phone_key );
		}


		/**
		 * This function is called by the filter mo_phone_dropdown_selector
		 * to return the Jquery selector of the phone field. The function will
		 * push the formID to the selector array if OTP Verification for the
		 * form has been enabled.
		 *
		 * @param  array $selector - the Jquery selector to be modified.
		 * @return array
		 */
		public function get_phone_number_selector( $selector ) {

			if ( $this->is_form_enabled() && strcasecmp( $this->otp_type, $this->type_phone_tag ) === 0 ) {
				array_push( $selector, $this->phone_form_id );
			}
			return $selector;
		}

		/** Getter for $is_only_phone_reset */
		public function getIsOnlyPhoneReset() {
			return $this->is_only_phone_reset; }
	}
}
